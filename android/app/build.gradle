def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"


// 加载密钥库
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('51ykt.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

def dartEnvironmentVariables = [
    APP_CHANNEL: 'UNKNOWN',
    APP_VERSION: '1.0.0'
]

// 获取命令行参数
if (project.hasProperty('dart-defines')) {
    dartEnvironmentVariables = dartEnvironmentVariables + project.property('dart-defines')
        .split(',')
        .collectEntries { entry ->
            // 老版本采用URLENCODER加密
            // def pair = URLDecoder.decode(entry).split('=')
            // Flutter2.2以上采用Base64加密
            def pair = new String(entry.decodeBase64(), 'UTF-8').split('=')
            println(pair.first()+':'+pair.last())
            [(pair.first()): pair.last()]
        }
}

android {
    compileSdkVersion flutter.compileSdkVersion
    ndkVersion '21.4.7075529'

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        // 唯一包名
        applicationId "com.szsdtech.wyjza"
        // minSdkVersion flutter.minSdkVersion
        // 适配的最低SDK版本，默认为flutter.minSdkVersion
        minSdkVersion 21
        // 适配的目标SDK版本
        targetSdkVersion flutter.targetSdkVersion
        // 内部版本号
        versionCode flutterVersionCode.toInteger()
        // 向用户展示的版本号
        versionName flutterVersionName
        manifestPlaceholders += [
            appName: "我来贷"
            ]
    }

    signingConfigs {
       release {
           keyAlias keystoreProperties['keyAlias']
           keyPassword keystoreProperties['keyPassword']
           storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
           storePassword keystoreProperties['storePassword']
       }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            ndk{
                //"armeabi","armeabi-v7a","arm64-v8a","x86_64","x86"
                abiFilters "armeabi-v7a"
                // abiFilters "armeabi","armeabi-v7a","arm64-v8a"
            }
        }
        debug {
            signingConfig signingConfigs.release
        }
    }

    //使用命令行参数
    //例子：打包APK时修改文件名带上渠道参数，还有一些SDK也可以通过这种方式设置参数
    //dartEnvironmentVariables.CHANNEL 使用参数
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            if(variant.buildType.name == "release"){
                // 获取版本
                def versionName = variant.versionName
                def versionCode = variant.versionName
             	// 设置新名称
                def newApkName ="app_v${defaultConfig.versionName}_${defaultConfig.versionCode}_${dartEnvironmentVariables.APP_CHANNEL}.apk"
                outputFileName = new File(newApkName)
            }
        }
    }
}

flutter {
    source '../..'
}
